<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_start();
camera_pos = MAE_VectorCreate(16, 16, 16);

//create physics world
MAE_PhysWorldCreate();

//create ground
MAE_PhysBodyCreate(MAE_PhysShapeCreatePlane(0, 0, 1, 0), 0, 0, 0, 0, 0, 0, 0);

//create some shapes
shape[0] = MAE_PhysShapeCreateBox(1, 1, 1);
shape[1] = MAE_PhysShapeCreateSphere(1);
shape[2] = MAE_PhysShapeCreateCone(1, 2, 2);
shape[3] = MAE_PhysShapeCreateCylinder(1, 1, 2);
shape[4] = MAE_PhysShapeCreateCapsule(1, 2, 2);

//3D models to visualize the shapes
model[0] = d3d_model_create();
d3d_model_block(model[0], -1, -1, -1, 1, 1, 1, 1, 1);
model[1] = d3d_model_create();
d3d_model_ellipsoid(model[1], -1, -1, -1, 1, 1, 1, 1, 1, 32);
model[2] = d3d_model_create();
d3d_model_cone(model[2], -1, -1, -1, 1, 1, 1, 1, 1, true, 32);
model[3] = d3d_model_create();
d3d_model_cylinder(model[3], -1, -1, -1, 1, 1, 1, 1, 1, true, 32);
model[4] = d3d_model_create();
d3d_model_cylinder(model[4], -1, -1, -1, 1, 1, 1, 1, 1, false, 32);
d3d_model_ellipsoid(model[4], -1, -1, 0, 1, 1, 2, 1, 1, 32);
d3d_model_ellipsoid(model[4], -1, -1, -2, 1, 1, 0, 1, 1, 32);

//create rigidbodies that will fall to the ground
for(var i=0; i&lt;array_length_1d(shape); i++){
    body[i] = MAE_PhysBodyCreate(shape[i], 1, random(pi*2), random(pi*2), random(pi*2), 0, 0, 10+i*5);
}

//debug draw toggle
debugdraw = false;

//mouse drag
dragging_body = -1;
dragging_distance = 0;
mouse_vector = 0;

//overlap test
overlap_box = MAE_PhysShapeCreateBox(2, 2, 2);
overlap_pos = MAE_VectorCreate(0, 0, 2.1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAE_PhysWorldStep(1/room_speed, 4, 1/120); //step the simulation

//get transform of each body
for(var i=0; i&lt;array_length_1d(body); i++){
    position[i] = MAE_PhysBodyGetPosition(body[i]);
    rotation[i] = MAE_PhysBodyGetRotationEuler(body[i]);
}

//drag bodies with mouse
if(!is_array(mouse_vector)) exit;
if(mouse_check_button_pressed(mb_left)){
    dragging_body = -1;
    var ray_dist = 200;
    var ray_start = camera_pos;
    var ray_end = MAE_VectorAdd(ray_start, MAE_VectorMultiply(mouse_vector, ray_dist));
    if(MAE_PhysWorldRaycast(ray_start, ray_end)){
        dragging_body = MAE_PhysWorldHitBody();
        if(!MAE_PhysBodyIsDynamic(dragging_body)) dragging_body = -1;
        else{
            dragging_distance = MAE_VectorDistance(MAE_PhysBodyGetPosition(dragging_body), camera_pos);
            MAE_PhysBodyActivate(dragging_body);
        }
    }
}
else if(mouse_check_button(mb_left)){
    if(dragging_body != -1){
        var target_pos = MAE_VectorAdd(camera_pos, MAE_VectorMultiply(mouse_vector, dragging_distance));
        var spd = MAE_VectorMultiply(MAE_VectorSubtract(target_pos, MAE_PhysBodyGetPosition(dragging_body)), 8);
        MAE_PhysBodySetLinearVelocity(dragging_body, spd);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAE_PhysWorldDestroy();
MAE_PhysShapeDestroyAll();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_text(400, 0, "Physics Bodies: "+string(MAE_PhysWorldGetBodyCount()));
draw_text(400, 16, "Press D to toggle debug draw");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_projection_ext(camera_pos[0], camera_pos[1], camera_pos[2], 0, 0, 0, 0, 0, 1, 55, room_width/room_height, 1, 1000);

//update mouse vector
var matrix = matrix_multiply(matrix_get(matrix_view), matrix_get(matrix_projection));
mouse_vector = MAE_VectorUnproject(MAE_VectorCreate(mouse_x, mouse_y, 0), matrix, MAE_ViewportCreate(0, 0, room_width, room_height));
mouse_vector = MAE_VectorNorm(MAE_VectorSubtract(mouse_vector, camera_pos));

//draw floor
draw_set_color(c_dkgray);
d3d_draw_floor(-10, -10, -0.1, 10 ,10, -0.1, -1, 1, 1);

//draw wireframe representation of physics scene
if(debugdraw) MAE_PhysWorldDebugDraw();

//draw a model for each dynamic body
draw_set_color(c_white);
d3d_set_culling(true);
if(debugdraw) draw_set_alpha(0.15);
for(var i=0; i&lt;array_length_1d(body); i++){
    var rot = rotation[i];
    d3d_transform_set_rotation_x(rot[0]);
    d3d_transform_add_rotation_y(rot[1]);
    d3d_transform_add_rotation_z(rot[2]);
    var pos = position[i];
    d3d_transform_add_translation(pos[0], pos[1], pos[2]);  
    d3d_model_draw(model[i], 0, 0, 0, background_get_texture(tex_box));
}
d3d_transform_set_identity();
d3d_set_culling(false);
draw_set_alpha(1);

//overlap test
/*
draw_set_alpha(0.15);
draw_set_color(c_blue);
if(MAE_PhysWorldOverlap(overlap_box, overlap_pos, MAE_QuaternionCreateIdentity())) draw_set_color(c_aqua);
d3d_transform_set_translation(overlap_pos[0], overlap_pos[1], overlap_pos[2]);
d3d_draw_block(-2, -2, -2, 2, 2, 2, -1, 1, 1);
d3d_transform_set_identity();
draw_set_alpha(1);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debugdraw = !debugdraw;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
